import { AuthService } from "./auth.service";
import { Request } from "express";
import { CreateUserDto } from "../users/dto/create-user.dto";
import { LoginUserDto } from "../users/dto/login-user.dto";
export declare class AuthController {
    private authService;
    constructor(authService: AuthService);
    signup(createUserDto: CreateUserDto): Promise<any>;
    signin(data: LoginUserDto): Promise<{
        accessToken: string;
        expires_in: Date;
        refreshToken: string;
        id: string;
        username: string;
        fullname: string;
        avatar: string;
        dob: Date;
        email: string;
        title: string;
        facebookLink: string;
        githubLink: string;
        twitterLink: string;
        websiteLink: string;
        password: string;
        role: import("../enums/role.enum").Role;
        activityPoint: number;
        createdAt: Date;
        updatedAt: Date;
        state: import("../enums/user-state.enum").UserState;
        uuid: string;
        uuid_created_at: Date;
        about: string;
        location: string;
        more: string;
        notificationsNumber: number;
        questions: import("../question/entity/question.entity").Question[];
        answers: import("../answer/entity/answer.entity").Answer[];
        votes: import("../vote/entity/vote.entity").Vote[];
        activities: import("../activity/entity/activity.entity").Activity[];
        tags: import("../tag/entity/tag.entity").Tag[];
        bookmarks: import("../bookmark/entity/bookmark.entity").Bookmark[];
        collections: import("../collection/enity/collection.entity").Collection[];
        histories: import("../history/entity/history.entity").History[];
        announcements: import("../announcement/entity/announcement.entity").Announcement[];
        sysconfigs: import("../sysconfig/entity/sysconfig.entity").Sysconfig[];
    }>;
    logout(req: Request): Promise<void>;
    refreshTokens(req: Request): Promise<{
        accessToken: string;
        expires_in: Date;
        refreshToken: string;
    }>;
    refreshTokensV2(data: any): Promise<{
        accessToken: string;
        expires_in: Date;
        refreshToken: string;
        id: string;
        username: string;
        fullname: string;
        avatar: string;
        dob: Date;
        email: string;
        title: string;
        facebookLink: string;
        githubLink: string;
        twitterLink: string;
        websiteLink: string;
        password: string;
        role: import("../enums/role.enum").Role;
        activityPoint: number;
        createdAt: Date;
        updatedAt: Date;
        state: import("../enums/user-state.enum").UserState;
        uuid: string;
        uuid_created_at: Date;
        about: string;
        location: string;
        more: string;
        notificationsNumber: number;
        questions: import("../question/entity/question.entity").Question[];
        answers: import("../answer/entity/answer.entity").Answer[];
        votes: import("../vote/entity/vote.entity").Vote[];
        activities: import("../activity/entity/activity.entity").Activity[];
        tags: import("../tag/entity/tag.entity").Tag[];
        bookmarks: import("../bookmark/entity/bookmark.entity").Bookmark[];
        collections: import("../collection/enity/collection.entity").Collection[];
        histories: import("../history/entity/history.entity").History[];
        announcements: import("../announcement/entity/announcement.entity").Announcement[];
        sysconfigs: import("../sysconfig/entity/sysconfig.entity").Sysconfig[];
    }>;
    googleAuth(): Promise<void>;
    googleAuthRedirect(req: any, res: any): Promise<void>;
    githubAuth(): Promise<void>;
    githubAuthRedirect(req: any, res: any): Promise<void>;
    forgotPassword(username: string): Promise<any>;
    resetPassword(uuid: string, password: string): Promise<any>;
    checkUserExists(username: string): Promise<import("../users/entity/users.entity").User>;
    confirmPassword(req: Request, password: string): Promise<{
        status: string;
    }>;
}
