import { Repository } from "typeorm";
import { CreateUserDto } from "./dto/create-user.dto";
import { User } from "./entity/users.entity";
import { UpdateUserDto } from "./dto/update-user.dto";
import { PaginateQuery } from "nestjs-paginate";
import { UpdateUserAdminDto } from "./dto/update-user-admin.dto";
import { CreateUserAdminDto } from "./dto/create-user-admin.dto";
import { QuestionTimeTypeEnum } from "src/enums/question-type.enum";
import { EmailService } from "src/email/email.service";
export declare class UsersService {
    private readonly userRepository;
    private readonly emailService;
    constructor(userRepository: Repository<User>, emailService: EmailService);
    getAllUser(query: PaginateQuery, state: string, role: string): Promise<import("nestjs-paginate").Paginated<User>>;
    create(createUserDto: CreateUserDto): Promise<User>;
    find(obj: any): Promise<User | undefined>;
    findOne(username: string): Promise<User | undefined>;
    findOneByEmail(email: string): Promise<User | undefined>;
    findOneByGithub(github: string): Promise<User | undefined>;
    findOneByRefreshToken(refreshToken: string): Promise<User | undefined>;
    findOneByUuid(uuid: string): Promise<User | undefined>;
    findOneById(id: string): Promise<User | undefined>;
    findById(id: string): Promise<Partial<User> | undefined>;
    update(id: string, userDto: UpdateUserDto): Promise<User>;
    getProfile(id: string): Promise<User | undefined>;
    getMoreProfileForAdmin(id: string, timeType?: QuestionTimeTypeEnum): Promise<any>;
    getProlifeForAdmin(id: string): Promise<any>;
    updateProfile(id: string, userDto: UpdateUserDto): Promise<User>;
    createUserForAdmin(createUserDto: CreateUserAdminDto): Promise<CreateUserAdminDto & User>;
    updateUserForAdmin(id: string, userDto: UpdateUserAdminDto): Promise<User>;
    updateActivityPoint(id: string, pointChange: number): Promise<import("typeorm").UpdateResult>;
    getTop5HasMostQuestion(): Promise<any[]>;
    getTop5HasMostAnswer(): Promise<any[]>;
    getOneById(userId: string): Promise<any>;
    updateEmail(id: string, email: string): Promise<User>;
    AddEmail(id: string, email: string): Promise<any>;
    updateUuidForAddEmail(user: any): Promise<any>;
    confirmEmail(uuid: string): Promise<any>;
}
